---
//Layouts
import HomeLayout from '../../../layouts/baseLayout/HomeLayout'
import HtmlLayout from '../../../layouts/htmlLayout/HtmlLayout.astro'

//Components
import Paragraph from '../../../components/blog/componentsForPages/paragraph/Paragraph'
import Buttons from '../../../components/blog/componentsForPages/buttons/Buttons'
import List from '../../../components/blog/componentsForPages/list/List'
---

<HtmlLayout title={`8) Database | Informatica Ovunque`}>
  <HomeLayout client:load>
    <h1 class={`text-central primary-color`}>8: Database</h1>

    <Paragraph 
      title={`Cos'è un Database?`}
      text={`Un database è un insieme di dati organizzato in modo tale che sia facilmente accessibile, gestibile e 
      aggiornabile. I dati all'interno di un database vengono strutturati in tabelle, righe e colonne, in modo da 
      permettere operazioni efficienti come la ricerca, l'inserimento, la modifica e la cancellazione delle 
      informazioni.`}
    />

    <Paragraph 
      title={`Tipologie di Database`}
      text={`Esistono diverse tipologie di database, ognuna con le sue caratteristiche, adatta a specifiche esigenze.
      Ecco alcune delle principali:`}
    >
      <List 
        listElements={[
          { header: `Database Relazionali (RDBMS)`, text: `I database relazionali memorizzano i dati in tabelle con righe e colonne. Utilizzano il linguaggio SQL per gestire e manipolare i dati. Esempi: MySQL, PostgreSQL, Oracle.` },
          { header: `Database NoSQL`, text: `I database NoSQL sono progettati per gestire dati non strutturati o semi-strutturati. Sono utilizzati per applicazioni che richiedono scalabilità orizzontale e alte performance. Esempi: MongoDB, Cassandra.` },
          { header: `Database a Oggetti`, text: `Questi database memorizzano i dati come oggetti, simili ai linguaggi di programmazione orientati agli oggetti. Esempi: ObjectDB, db4o.` },
          { header: `Database In-Memory`, text: `I database in-memory memorizzano tutti i dati nella RAM per offrire performance molto elevate. Esempi: Redis, Memcached.` },
        ]}
      />
    </Paragraph>

    <Paragraph 
      title={`Come Funzionano i Database?`}
      text={`I database funzionano come contenitori per i dati che devono essere memorizzati in modo strutturato. Gli utenti o le applicazioni interagiscono con il database tramite comandi specifici, come query SQL per i database relazionali. Quando un'applicazione ha bisogno di recuperare o aggiornare dei dati, invia una query al database che restituisce i dati o esegue l'operazione richiesta.`}
    />

    <Paragraph 
      title={`Concetti Fondamentali`}
      text={`Alcuni concetti fondamentali che caratterizzano i database includono:`}
    >
      <List 
        listElements={[
          { header: `Tabelle`, text: `Una tabella è una struttura che memorizza i dati in righe e colonne. Ogni colonna rappresenta un tipo di dato e ogni riga rappresenta una singola entry o record.` },
          { header: `Chiavi Primarie`, text: `Una chiave primaria è un identificatore unico per ogni record in una tabella. È usata per garantire che ogni riga sia univocamente identificabile.` },
          { header: `Indici`, text: `Gli indici sono strutture dati che migliorano la velocità di ricerca e recupero dei dati da un database.` },
          { header: `Relazioni`, text: `Le relazioni definiscono come le tabelle sono connesse tra loro, tipicamente tramite chiavi esterne che fanno riferimento a chiavi primarie di altre tabelle.` },
        ]}
      />
    </Paragraph>

    <Paragraph 
      title={`Sistemi di Gestione dei Database (DBMS)`}
      text={`Un Sistema di Gestione dei Database (DBMS) è un software che permette di creare, leggere, aggiornare e cancellare dati in un database. Un DBMS fornisce anche funzionalità avanzate come backup, sicurezza e gestione delle transazioni. Esempi di DBMS includono MySQL, PostgreSQL, Microsoft SQL Server e MongoDB.`}
    />

    <Paragraph 
      title={`SQL`}
      text={`Per interagire con i database, è necessario utilizzare linguaggi specifici che consentono di eseguire 
      query per recuperare, aggiornare, eliminare e inserire dati. Il linguaggio più utilizzato per i database 
      relazionali è SQL (Structured Query Language). SQL è un linguaggio dichiarativo che permette di scrivere
      comandi per interrogare il database in modo semplice e diretto. Di seguito vengono riportati alcuni dei
      comandi SQL più comuni:`}
    >
      <List 
        listElements={[
          { header: `SELECT`, text: `Permette di estrarre dati da una o più tabelle. Ad esempio, \`SELECT * FROM utenti;\` recupera tutti i dati dalla tabella 'utenti'.` },
          { header: `INSERT`, text: `Usato per inserire nuovi dati nelle tabelle. Ad esempio, \`INSERT INTO utenti (nome, età) VALUES ('Mario', 30);\` inserisce una nuova riga nella tabella 'utenti'.` },
          { header: `UPDATE`, text: `Permette di aggiornare i dati esistenti. Ad esempio, \`UPDATE utenti SET età = 31 WHERE nome = 'Mario';\` aggiorna l'età dell'utente con nome Mario.` },
          { header: `DELETE`, text: `Permette di eliminare dati. Ad esempio, \`DELETE FROM utenti WHERE nome = 'Mario';\` elimina l'utente di nome Mario dalla tabella 'utenti'.` },
          { header: `CREATE TABLE`, text: `Usato per creare una nuova tabella in un database. Ad esempio, \`CREATE TABLE utenti (id INT, nome VARCHAR(100), età INT);\` crea una tabella 'utenti' con le colonne id, nome ed età.` },
          { header: `ALTER TABLE`, text: `Permette di modificare la struttura di una tabella esistente. Ad esempio, \`ALTER TABLE utenti ADD email VARCHAR(100);\` aggiunge una colonna 'email' alla tabella 'utenti'.` },
          { header: `DROP TABLE`, text: `Usato per eliminare una tabella dal database. Ad esempio, \`DROP TABLE utenti;\` elimina completamente la tabella 'utenti'.` }
        ]}
      />
    </Paragraph>

    <Paragraph 
      title={`Altri linguaggi`} 
      text={`Oltre a SQL, esistono altri linguaggi utilizzati per interagire con database NoSQL. Questi linguaggi si differenziano in quanto sono progettati per interagire con strutture di dati NoSQL, che non seguono il modello relazionale tradizionale. I database NoSQL sono spesso utilizzati per gestire grandi volumi di dati non strutturati, come documenti JSON, dati key-value, grafi o colonne. Ecco alcuni dei linguaggi più comuni utilizzati per lavorare con database NoSQL:`}
    >
      <List 
        listElements={[
          { header: `MongoDB Query Language (MQL)`, text: `MongoDB, uno dei più popolari database NoSQL document-based, utilizza MQL per interrogare e manipolare documenti JSON. Ad esempio, \`db.users.find({ age: { $gt: 20 } })\` per trovare utenti con età superiore a 20.` },
          { header: `CQL (Cassandra Query Language)`, text: `Cassandra, un database NoSQL orientato alle colonne, utilizza CQL, che ha una sintassi simile a SQL ma adattata per un modello di dati a colonne. Ad esempio, \`SELECT * FROM users WHERE age > 20;\`.` },
        ]}
      />
    </Paragraph>

    <Buttons goBackButtonDisabled={false} goNextButtonDisabled={true} 
      backPath={`/blog/concetti-fondamentali/7-strutture-dati`} />
  </HomeLayout>
</HtmlLayout>
