---
//Layouts
import {HtmlLayout, HomeLayout} from '../../../layouts/layoutsDependencies'

//Components
import {Paragraph, Picture, List, Buttons} from '../../../components/componentsDependencies.js'
---

<HtmlLayout title=`3)Pipeline (CPU) | Informatica Ovunque`>
  <HomeLayout client:load>
    <div>
      <h1 class=`text-central primary-color`>3: La Pipeline della CPU</h1>
  </div>

  <Paragraph title=`Cos'è la Pipeline della CPU?` 
    text=`La <strong>pipeline della CPU</strong> è un'architettura che permette l'elaborazione simultanea di più istruzioni, 
    migliorando le prestazioni del processore. Ogni istruzione passa attraverso una serie di fasi, che possono essere eseguite in parallelo per ridurre i tempi di attesa e 
    aumentare la velocità complessiva del processore. L'idea alla base di questa tipologia di meccanismo è la stessa
    che è ormai presente da un secolo nel settore industriale: la catena di montaggio.Questa ha permesso di ridurre
    drasticamente i costi e i tempi di produzione, dividendo il processo produttivo in tante piccole fasi.` />

  <Paragraph title=`Fasi della Pipeline` text=`Le fasi che costituiscono la pipeline di una CPU, sia il numero che la tipologia,
  dipendendono dall'architettura e dalle scelte progettuali. Anche il numero delle fasi può variare molto, arrivando anche
  a diverse decine. In questo caso analizziamo un caso relativamente semplice, composto da 5 fasi.`>
    <List listElements={[
      { header: `Fase di Fetch`, text: `Recupero dell'istruzione dalla memoria utilizzando l'indirizzo fornito dal Program Counter (PC). Il Program Counter viene poi aggiornato per puntare all'istruzione successiva.` },
      { header: `Fase di Decode`, text: `L'istruzione recuperata viene decodificata dalla Unità di Controllo (CU), che determina l'operazione da eseguire e gli operandi necessari.` },
      { header: `Fase di Execute`, text: `L'ALU esegue l'operazione specificata dall'istruzione. Gli operandi vengono prelevati dai registri e i risultati vengono elaborati.` },
      { header: `Fase di Memory Access`, text: `Se l'istruzione richiede un accesso alla memoria, questa fase legge o scrive i dati necessari.` },
      { header: `Fase di Write-back`, text: `I risultati dell'operazione vengono scritti nei registri o nella memoria, completando così l'esecuzione dell'istruzione.` }
    ]} />

  </Paragraph>

  <Paragraph title=`Perché la Pipeline è importante?` 
    text=`La pipeline è cruciale perché consente alla CPU di ridurre il tempo necessario per eseguire un programma. 
    Anziché aspettare che una singola istruzione sia completamente eseguita prima di iniziare la successiva, ogni 
    fase del ciclo di vita di un'istruzione viene elaborata separatamente e in parallelo. Questo approccio migliora 
    le prestazioni e ottimizza l'utilizzo delle risorse hardware, portando ad un'elaborazione più veloce e a un 
    maggiore <strong>throughput</strong> del sistema, ovvero il numero di istruzioni eseguite in un ciclo di clock` />

  <Paragraph title=`Problemi della Pipeline` 
    text=`Nonostante i numerosi vantaggi, la pipeline può anche incontrare alcuni problemi. Uno dei principali è la 
    dipendenza tra le istruzioni, che può causare rallentamenti. Ad esempio, se un'istruzione dipende dal risultato 
    di una precedente (una '<strong>data hazard</strong>'), la CPU dovrà aspettare che questa venga completata, 
    bloccando temporaneamente la pipeline. Altri problemi includono le '<strong>control hazards</strong>', che si verificano quando 
    un'istruzione di salto cambia il flusso del programma.` />

  <Paragraph title=`Vantaggi della Pipeline` 
      text=`Ricapitolando, la pipeline assicura diversi vantaggi tra cui:`>
      <List listElements={[ 
          { header: `Miglioramento delle prestazioni`, text: `Le fasi di fetch, decode, execute, e memory access possono essere eseguite in parallelo, riducendo il tempo totale per l'elaborazione delle istruzioni.` },
          { header: `Maggiore efficienza`, text: `Ogni ciclo di clock può essere sfruttato al massimo, poiché diverse fasi lavorano contemporaneamente su istruzioni diverse.` },
          { header: `Riduzione del tempo di latenza`, text: `La CPU può continuare a lavorare su nuove istruzioni mentre altre fasi della pipeline completano le istruzioni precedenti.` }
      ]}/>
  </Paragraph>

  <Buttons goBackButtonDisabled={false} backPath=`/blog/componenti-computer/2-cpu` 
    nextPath=`/blog/componenti-computer/4-ram`/>
  </HomeLayout>
</HtmlLayout>
